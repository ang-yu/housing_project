
rm(list=ls()) 
setwd("~/Desktop/Research/Housing project/PSID_working")
options(scipen=999)

library("haven")
library("tidyverse")

# df is the cross-year (user-generated) merged data of TAS, PSID individual file, and PSID family file for TAS interviwees
df <- read_dta("/Users/Ang/Desktop/Data/J266390/J266390.dta")
df <- as.data.frame(df)  # By default, the read_dta function creates a tbl_df object instead of regular dataframe

# ind <- read_dta("/Users/Ang/Desktop/Data/ind2017er/ind.dta")
# ind_keep <- c("ER30001","ER30002","ER34201","ER34101","ER34001","ER33901","ER33801","ER34301","ER34501","ER34203","ER34303","ER34503","ER34103","ER34003","ER33903","ER33803","ER33501","ER33601","ER33701")
# # These are interview numbers used for merging
# ind <- ind[,colnames(ind) %in% ind_keep]
# ind <- as.data.frame(ind)
# save(ind, file = "ind_inuse.RData")
load("ind_inuse.RData")

# fam99 <- read_dta("/Users/Ang/Desktop/Data/fam1999er/fam1999.dta")
# fam99_keep <- c("ER13040","ER13002","ER13005","ER13008","ER13006")
# # ER13040: "own/rent or what"; ER13002: 1999 family ID; ER13005: current state; ER13008: int year; ER13006: int month
# fam99 <- fam99[,colnames(fam99) %in% fam99_keep]
# fam99 <- as.data.frame(fam99)
# save(fam99, file = "fam99_inuse.RData")
load("fam99_inuse.RData")

# fam01 <- read_dta("/Users/Ang/Desktop/Data/fam2001er/fam2001.dta")
# fam01_keep <- c("ER17043","ER17002","ER17005","ER17011","ER17009")
# # ER17043: "own/rent or what"; ER17002: 2001 family ID; ER17005: current state; ER17011: int year; ER17009: int month
# fam01 <- fam01[,colnames(fam01) %in% fam01_keep]
# fam01 <- as.data.frame(fam01)
# save(fam01, file = "fam01_inuse.RData")
load("fam01_inuse.RData")

# fam03 <- read_dta("/Users/Ang/Desktop/Data/fam2003er/fam2003.dta")
# fam03_keep <- c("ER21042","ER21002","ER21004","ER21014","ER21012")
# # ER21042: "own/rent or what"; ER21002: 2003 family ID; ER21004: current state; ER21014: int year; ER21012: int month
# fam03 <- fam03[,colnames(fam03) %in% fam03_keep]
# fam03 <- as.data.frame(fam03)
# save(fam03, file = "fam03_inuse.RData")
load("fam03_inuse.RData")

# fam05 <- read_dta("/Users/Ang/Desktop/Data/fam2005er/fam2005.dta")
# fam05_keep <- c("ER25028","ER25002","ER25004","ER25014","ER25012")
# # ER25028: "own/rent or what"; ER25002: 2013 family ID; ER25004: current state; ER25014: int year; ER25012: int month
# fam05 <- fam05[,colnames(fam05) %in% fam05_keep]
# fam05 <- as.data.frame(fam05)
# save(fam05, file = "fam05_inuse.RData")
load("fam05_inuse.RData")

# fam07 <- read_dta("/Users/Ang/Desktop/Data/fam2007er/fam2007.dta")
# fam07_keep <- c("ER36028","ER36002","ER36004","ER36014","ER36012")
# # ER36028: "own/rent or what"; ER36002: 2013 family ID; ER36004: current state; ER36014: int year; ER36012: int month
# fam07 <- fam07[,colnames(fam07) %in% fam07_keep]
# fam07 <- as.data.frame(fam07)
# save(fam07, file = "fam07_inuse.RData")
load("fam07_inuse.RData")

# fam09 <- read_dta("/Users/Ang/Desktop/Data/fam2009er/fam2009.dta")
# fam09_keep <- c("ER42029","ER42002","ER42004","ER42014","ER42012")
# # ER42029: "own/rent or what"; ER42002: 2013 family ID; ER42004: current state; ER42014: int year; ER42012: int month
# fam09 <- fam09[,colnames(fam09) %in% fam09_keep]
# fam09 <- as.data.frame(fam09)
# save(fam09, file = "fam09_inuse.RData")
load("fam09_inuse.RData")

# fam11 <- read_dta("/Users/Ang/Desktop/Data/fam2011er/fam2011.dta")
# fam11_keep <- c("ER47329","ER47302","ER47304","ER47314","ER47312")
# # ER47329: "own/rent or what"; ER47302: 2013 family ID; ER47304: current state; ER47314: int year; ER47312: int month
# fam11 <- fam11[,colnames(fam11) %in% fam11_keep]
# fam11 <- as.data.frame(fam11)
# save(fam11, file = "fam11_inuse.RData")
load("fam11_inuse.RData")

# fam13 <- read_dta("/Users/Ang/Desktop/Data/fam2013er/fam2013.dta")
# fam13_keep <- c("ER53029","ER53002","ER53004","ER53014","ER53012")
# # ER53029: "own/rent or what"; ER53002: 2013 family ID; ER53004: current state; ER53014: int year; ER53012: int month
# fam13 <- fam13[,colnames(fam13) %in% fam13_keep]
# fam13 <- as.data.frame(fam13)
# save(fam13, file = "fam13_inuse.RData")
load("fam13_inuse.RData")

# fam15 <- read_dta("/Users/Ang/Desktop/Data/fam2015er/fam2015.dta")
# fam15_keep <- c("ER60030","ER60002","ER60004","ER60014","ER60012")
# fam15 <- fam15[,colnames(fam15) %in% fam15_keep]
# fam15 <- as.data.frame(fam15)
# save(fam15, file = "fam15_inuse.RData")
load("fam15_inuse.RData")

# fam17 <- read_dta("/Users/Ang/Desktop/Data/fam2017er/fam2017.dta")
# fam17_keep <- c("ER66030","ER66002","ER66004","ER66014","ER66012")
# fam17 <- fam17[,colnames(fam17) %in% fam17_keep]
# fam17 <- as.data.frame(fam17)
# save(fam17, file = "fam17_inuse.RData")
load("fam17_inuse.RData")

# then merge individual ID with family ID
# how many people in the individual file can be matched with a family in each year?
sum(ind$ER34201 %in% fam13$ER53002)
sum(ind$ER34301 %in% fam15$ER60002)
sum(ind$ER34501 %in% fam17$ER66002)

ind <- left_join(ind, fam99, by = c("ER33501" = "ER13002"))
ind <- left_join(ind, fam01, by = c("ER33601" = "ER17002"))
ind <- left_join(ind, fam03, by = c("ER33701" = "ER21002"))
ind <- left_join(ind, fam05, by = c("ER33801" = "ER25002"))
ind <- left_join(ind, fam07, by = c("ER33901" = "ER36002"))
ind <- left_join(ind, fam09, by = c("ER34001" = "ER42002"))
ind <- left_join(ind, fam11, by = c("ER34101" = "ER47302"))
ind <- left_join(ind, fam13, by = c("ER34201" = "ER53002"))
ind <- left_join(ind, fam15, by = c("ER34301" = "ER60002"))
ind <- left_join(ind, fam17, by = c("ER34501" = "ER66002"))
# don't worry about the warning messages

# housing status variables
ind$own99 <- NA 
ind$own99[ind$ER13040==5] <- 0   # renting
ind$own99[ind$ER13040==1] <- 1   # owning
ind$own99[ind$ER13040==8] <- 2  # neither

ind$own01 <- NA 
ind$own01[ind$ER17043==5] <- 0   # renting
ind$own01[ind$ER17043==1] <- 1   # owning
ind$own01[ind$ER17043==8] <- 2  # neither

ind$own03 <- NA 
ind$own03[ind$ER21042==5] <- 0   # renting
ind$own03[ind$ER21042==1] <- 1   # owning
ind$own03[ind$ER21042==8] <- 2  # neither

ind$own05 <- NA 
ind$own05[ind$ER25028==5] <- 0   # renting
ind$own05[ind$ER25028==1] <- 1   # owning
ind$own05[ind$ER25028==8] <- 2  # neither

ind$own07 <- NA 
ind$own07[ind$ER36028==5] <- 0   # renting
ind$own07[ind$ER36028==1] <- 1   # owning
ind$own07[ind$ER36028==8] <- 2   # neither

ind$own09 <- NA 
ind$own09[ind$ER42029==5] <- 0   # renting
ind$own09[ind$ER42029==1] <- 1   # owning
ind$own09[ind$ER42029==8] <- 2   # neither

ind$own11 <- NA 
ind$own11[ind$ER47329==5] <- 0   # renting
ind$own11[ind$ER47329==1] <- 1   # owning
ind$own11[ind$ER47329==8] <- 2   # neither

ind$own13 <- NA 
ind$own13[ind$ER53029==5] <- 0   # renting
ind$own13[ind$ER53029==1] <- 1   # owning
ind$own13[ind$ER53029==8] <- 2   # neither

ind$own15 <- NA 
ind$own15[ind$ER60030==5] <- 0   # renting
ind$own15[ind$ER60030==1] <- 1   # owning
ind$own15[ind$ER60030==8] <- 2   # neither

ind$own17 <- NA 
ind$own17[ind$ER66030==5] <- 0   # renting
ind$own17[ind$ER66030==1] <- 1   # owning
ind$own17[ind$ER66030==8] <- 2   # neither

# head/wife/reference person status

ind$ref05 <- NA # Inap. will remain NA
ind$ref05[!ind$ER33803%in%c(10,20,22,0)] <- 0  
ind$ref05[ind$ER33803%in%c(10,20,22)] <- 1

ind$ref07 <- NA # Inap. will remain NA
ind$ref07[!ind$ER33903%in%c(10,20,22,0)] <- 0  
ind$ref07[ind$ER33903%in%c(10,20,22)] <- 1

ind$ref09 <- NA # Inap. will remain NA
ind$ref09[!ind$ER34003%in%c(10,20,22,0)] <- 0  
ind$ref09[ind$ER34003%in%c(10,20,22)] <- 1

ind$ref11 <- NA # Inap. will remain NA
ind$ref11[!ind$ER34103%in%c(10,20,22,0)] <- 0  
ind$ref11[ind$ER34103%in%c(10,20,22)] <- 1

ind$ref13 <- NA # Inap. will remain NA
ind$ref13[!ind$ER34203%in%c(10,20,22,0)] <- 0  
ind$ref13[ind$ER34203%in%c(10,20,22)] <- 1 # head, legal wife, "wife". 
# This I think is consistent with the head/wife status variable TA130011 in TAS

ind$ref15 <- NA 
ind$ref15[!ind$ER34303%in%c(10,20,22,0)] <- 0  
ind$ref15[ind$ER34303%in%c(10,20,22)] <- 1 # head, legal spouse, partner
# Again, this time consistent with TA150011 in TAS

ind$ref17 <- NA 
ind$ref17[!ind$ER34503%in%c(10,20,22,0)] <- 0  
ind$ref17[ind$ER34503%in%c(10,20,22)] <- 1 # Reference Person, legal spouse, partner  
# this time consistent with TA170006 in TAS

## independent renting status indicator
ind$inde_renting_05 <- NA
ind$inde_renting_05[!(ind$ref05==1 & ind$own05==0) & !is.na(ind$ref05) & !is.na(ind$own05)] <- 0  # not missing information, but not in independent renting
ind$inde_renting_05[ind$ref05==1 & ind$own05==0] <- 1  # independent renting (head/wife status + renting)

ind$inde_renting_07 <- NA
ind$inde_renting_07[!(ind$ref07==1 & ind$own07==0) & !is.na(ind$ref07) & !is.na(ind$own07)] <- 0  # not missing information, but not in independent renting
ind$inde_renting_07[ind$ref07==1 & ind$own07==0] <- 1  # independent renting (head/wife status + renting)

ind$inde_renting_09 <- NA
ind$inde_renting_09[!(ind$ref09==1 & ind$own09==0) & !is.na(ind$ref09) & !is.na(ind$own09)] <- 0  # not missing information, but not in independent renting
ind$inde_renting_09[ind$ref09==1 & ind$own09==0] <- 1  # independent renting (head/wife status + renting)

ind$inde_renting_11 <- NA
ind$inde_renting_11[!(ind$ref11==1 & ind$own11==0) & !is.na(ind$ref11) & !is.na(ind$own11)] <- 0  # not missing information, but not in independent renting
ind$inde_renting_11[ind$ref11==1 & ind$own11==0] <- 1  # independent renting (head/wife status + renting)

ind$inde_renting_13 <- NA
ind$inde_renting_13[!(ind$ref13==1 & ind$own13==0) & !is.na(ind$ref13) & !is.na(ind$own13)] <- 0  # not missing information, but not in independent renting
ind$inde_renting_13[ind$ref13==1 & ind$own13==0] <- 1  # independent renting (head/wife status + renting)

ind$inde_renting_15 <- NA
ind$inde_renting_15[!(ind$ref15==1 & ind$own15==0) & !is.na(ind$ref15) & !is.na(ind$own15)] <- 0  # not missing information, but not in independent renting
ind$inde_renting_15[ind$ref15==1 & ind$own15==0] <- 1  # independent renting (head/wife status + renting)

ind$inde_renting_17 <- NA
ind$inde_renting_17[!(ind$ref17==1 & ind$own17==0) & !is.na(ind$ref17) & !is.na(ind$own17)] <- 0  # not missing information, but not in independent renting
ind$inde_renting_17[ind$ref17==1 & ind$own17==0] <- 1  # independent renting (head/wife status + renting)

## independet owning status indicator

ind$inde_owning_05 <- NA
ind$inde_owning_05[!(ind$ref05==1 & ind$own05==1) & !is.na(ind$ref05) & !is.na(ind$own05)] <- 0  # not missing information, but not in independent owning
ind$inde_owning_05[ind$ref05==1 & ind$own05==1] <- 1  # independent owning (head/wife status + owning)

ind$inde_owning_07 <- NA
ind$inde_owning_07[!(ind$ref07==1 & ind$own07==1) & !is.na(ind$ref07) & !is.na(ind$own07)] <- 0  # not missing information, but not in independent owning
ind$inde_owning_07[ind$ref07==1 & ind$own07==1] <- 1  # independent owning (head/wife status + owning)

ind$inde_owning_09 <- NA
ind$inde_owning_09[!(ind$ref09==1 & ind$own09==1) & !is.na(ind$ref09) & !is.na(ind$own09)] <- 0  # not missing information, but not in independent owning
ind$inde_owning_09[ind$ref09==1 & ind$own09==1] <- 1  # independent owning (head/wife status + owning)

ind$inde_owning_11 <- NA
ind$inde_owning_11[!(ind$ref11==1 & ind$own11==1) & !is.na(ind$ref11) & !is.na(ind$own11)] <- 0  # not missing information, but not in independent owning
ind$inde_owning_11[ind$ref11==1 & ind$own11==1] <- 1  # independent owning (head/wife status + owning)

ind$inde_owning_13 <- NA
ind$inde_owning_13[!(ind$ref13==1 & ind$own13==1) & !is.na(ind$ref13) & !is.na(ind$own13)] <- 0  # not missing information, but not in independent owning
ind$inde_owning_13[ind$ref13==1 & ind$own13==1] <- 1  # independent owning (head/wife status + owning)

ind$inde_owning_15 <- NA
ind$inde_owning_15[!(ind$ref15==1 & ind$own15==1) & !is.na(ind$ref15) & !is.na(ind$own15)] <- 0  # not missing information, but not in independent owning
ind$inde_owning_15[ind$ref15==1 & ind$own15==1] <- 1  # independent owning (head/wife status + owning)

ind$inde_owning_17 <- NA
ind$inde_owning_17[!(ind$ref17==1 & ind$own17==1) & !is.na(ind$ref17) & !is.na(ind$own17)] <- 0  # not missing information, but not in independent owning
ind$inde_owning_17[ind$ref17==1 & ind$own17==1] <- 1  # independent owning (head/wife status + owning)

ind$status_05 <- NA
ind$status_05[ind$inde_renting_05==1] <- 1  # independent renting
ind$status_05[ind$inde_owning_05==1] <- 2  # independent owning
ind$status_05[!is.na(ind$inde_renting_05) & !is.na(ind$inde_owning_05) & ind$inde_renting_05!=1 & ind$inde_owning_05!=1] <- 0  # neither. but have valid information 
table(ind$status_05, useNA = "always")
# (four possibilities corresponding to status 0)
# 1. head/wife status, neither renting nor owning (maybe living in residence owned by parents or other people? So they don't own the place but they also don't pay rents)
# 2. non-head/wife status, renting (meaning I can infer that the housing is on parental support)
# 3. non-head/wife status, owning (same)
# 4. non-head/wife status, neither renting nor owning (same)
# note that I've checked and this indeed works. The reason is as long as both the individual and the family are interviewed in each given year, head/wife status and housing status do NOT have any NA in the original dataset. 
# Hence, there are only six possible combinations of the housing variable and the head/wife variable for interviewed individuals and families. Apart from independent renting and independent owning, all the four possibilies are "non" status. 

ind$status_07 <- NA
ind$status_07[ind$inde_renting_07==1] <- 1  # independent renting
ind$status_07[ind$inde_owning_07==1] <- 2  # independent owning
ind$status_07[!is.na(ind$inde_renting_07) & !is.na(ind$inde_owning_07) & ind$inde_renting_07!=1 & ind$inde_owning_07!=1] <- 0  # neither. but have valid information 

ind$status_09 <- NA
ind$status_09[ind$inde_renting_09==1] <- 1  # independent renting
ind$status_09[ind$inde_owning_09==1] <- 2  # independent owning
ind$status_09[!is.na(ind$inde_renting_09) & !is.na(ind$inde_owning_09) & ind$inde_renting_09!=1 & ind$inde_owning_09!=1] <- 0  # neither. but have valid information 

ind$status_11 <- NA
ind$status_11[ind$inde_renting_11==1] <- 1  # independent renting
ind$status_11[ind$inde_owning_11==1] <- 2  # independent owning
ind$status_11[!is.na(ind$inde_renting_11) & !is.na(ind$inde_owning_11) & ind$inde_renting_11!=1 & ind$inde_owning_11!=1] <- 0  # neither. but have valid information 

ind$status_13 <- NA
ind$status_13[ind$inde_renting_13==1] <- 1  # independent renting
ind$status_13[ind$inde_owning_13==1] <- 2  # independent owning
ind$status_13[!is.na(ind$inde_renting_13) & !is.na(ind$inde_owning_13) & ind$inde_renting_13!=1 & ind$inde_owning_13!=1] <- 0  # neither. but have valid information 

ind$status_15 <- NA
ind$status_15[ind$inde_renting_15==1] <- 1  # independent renting
ind$status_15[ind$inde_owning_15==1] <- 2  # independent owning
ind$status_15[!is.na(ind$inde_renting_15) & !is.na(ind$inde_owning_15) & ind$inde_renting_15!=1 & ind$inde_owning_15!=1] <- 0  # neither. but have valid information 

ind$status_17 <- NA
ind$status_17[ind$inde_renting_17==1] <- 1  # independent renting
ind$status_17[ind$inde_owning_17==1] <- 2  # independent owning
ind$status_17[!is.na(ind$inde_renting_17) & !is.na(ind$inde_owning_17) & ind$inde_renting_17!=1 & ind$inde_owning_17!=1] <- 0  # neither. but have valid information 

# Is it possible to use the reference status to reduce missingness in the status variable? (status must equal to 0 if reference status is 0, even if the housing status is missing)
table(ind$status_05, ind$ref05, useNA = "always")
table(ind$status_07, ind$ref07, useNA = "always")
table(ind$status_09, ind$ref09, useNA = "always")
table(ind$status_11, ind$ref11, useNA = "always")
table(ind$status_13, ind$ref13, useNA = "always")
table(ind$status_15, ind$ref15, useNA = "always")
table(ind$status_17, ind$ref17, useNA = "always")
# apart from 2 people in wave 2, it's not possible to subtract more information. I don't think these two people matter. 

### time constant variables ###

## pid ##
df$pid <- (df$ER30001 * 1000) + df$ER30002
ind$pid <- (ind$ER30001 * 1000) + ind$ER30002

df <- merge(df, ind, by = "pid", all.x = T)

length(unique(df$pid)) == nrow(df)  # True

# only keep the original CDS cohort members to ensure there is no left-censoring and full information for everybody
# (TAS 2017 included people who enter the TAS after age 18)
# only the original CDS cohort members have full set of covariates 
df <- df[!df$TA171988 %in% 0,] # from 4058 to 2942
# This variable is the weight variable in TAS2017. it equaling to 0 means the respondent did not participate in CDS 1997

## sex ##
df$male <- NA
df$male[df$ER32000==1] <- 1
df$male[df$ER32000==2] <- 0
table(df$male)

## birth year and month ##
df$byear <- NA
df$bmonth <- NA

# first use birth year and month recorded in the last survey year (2017), then replace it with 
# earlier records in reversed temporal order if the 2017 record is missing. 
# Note that records are sometimes updated in later waves, so starting from the last wave makes sense.

df$byear <- df$ER34506
df$bmonth <- df$ER34505

# these variables are from each wave of TAS, starting from the first wave in 2005
var_y <- c("ER34307", "ER34206","ER34106","ER34006","ER33906","ER33806")
var_m <- c("ER34306", "ER34205","ER34105","ER34005","ER33905","ER33805")

for (i in 1:length(var_y)) {
  
  df$byear[df$byear==0] <- unlist(df[df$byear==0, var_y[i]])
  df$bmonth[df$bmonth==0] <- unlist(df[df$bmonth==0, var_m[i]])
  
}

table(df$byear)
table(df$bmonth)

## race ##
# 1: White; 2: Black; 3: Other
# Note that in the coded variable, white and black refer to non-hispanic white and black
# If "don't know" or "refused to answer" either the race question or the hispanicity question, then the variable is coded NA

# wave 1
# first get the race and ethnicity information from each wave, because respondents are asked more than once. 
df$race_1 <- NA

# start from the last mention and work backwards 
df$race_1[df$TA050886==1] <- 1
df$race_1[df$TA050886==2] <- 2
df$race_1[df$TA050886%in%3:7] <- 3  
table(df$race_1, useNA = "always")

# if the last mention doesn't give concrete information, then use the second last mention
df$race_1[df$TA050885==1 & is.na(df$race_1)] <- 1
df$race_1[df$TA050885==2 & is.na(df$race_1)] <- 2
df$race_1[df$TA050885%in%3:7 & is.na(df$race_1)] <- 3

# then use the values from the third last mention, which in this case is the first mention 
df$race_1[df$TA050884==1 & is.na(df$race_1)] <- 1
df$race_1[df$TA050884==2 & is.na(df$race_1)] <- 2
df$race_1[df$TA050884%in%3:7 & is.na(df$race_1)] <- 3

# Then need to take into account hispanicity
df$race_1[df$TA050883%in%8:9] <- NA # if don't know or refused to answer hispanicity, code race to NA
df$race_1[df$TA050883%in%1:7] <- 3  # if is hispanic, then code race to be "other"

table(df$race_1, useNA = "always")
table(df$tas_year_1, useNA = "always")
sum(is.na(df$race_1))-sum(is.na(df$tas_year_1)) 
sum(!is.na(df$tas_year_1))  # the tas_year variables are generated later
sum(df$race_1%in%1:2)
# Hence, out of 745 respondents in TAS first wave, 4 don't have valid race information. 
# In wave 1, there are 649 non-hispanic Blacks and Whites

# wave 2
df$race_2 <- NA

df$race_2[df$TA070867==1] <- 1
df$race_2[df$TA070867==2] <- 2
df$race_2[df$TA070867%in%3:7] <- 3

df$race_2[df$TA070866==1 & is.na(df$race_2)] <- 1
df$race_2[df$TA070866==2 & is.na(df$race_2)] <- 2
df$race_2[df$TA070866%in%3:7 & is.na(df$race_2)] <- 3

df$race_2[df$TA070865==1 & is.na(df$race_2)] <- 1
df$race_2[df$TA070865==2 & is.na(df$race_2)] <- 2
df$race_2[df$TA070865%in%3:7 & is.na(df$race_2)] <- 3

df$race_2[df$TA070864%in%8:9] <- NA 
df$race_2[df$TA070864%in%1:7] <- 3 

table(df$race_2, useNA = "always")
table(df$tas_year_2, useNA = "always")
sum(is.na(df$race_2))-sum(is.na(df$tas_year_2)) 
sum(!is.na(df$tas_year_2))
sum(df$race_2%in%1:2)
# Hence, out of 1115 respondents in TAS second wave, 4 don't have valid race information.
# In wave 2, there are 968 non-hispanic Blacks and Whites

# wave 3
df$race_3 <- NA

df$race_3[df$TA090927==1] <- 1
df$race_3[df$TA090927==2] <- 2
df$race_3[df$TA090927%in%3:7] <- 3

df$race_3[df$TA090926==1 & is.na(df$race_3)] <- 1
df$race_3[df$TA090926==2 & is.na(df$race_3)] <- 2
df$race_3[df$TA090926%in%3:7 & is.na(df$race_3)] <- 3

df$race_3[df$TA090925==1 & is.na(df$race_3)] <- 1
df$race_3[df$TA090925==2 & is.na(df$race_3)] <- 2
df$race_3[df$TA090925%in%3:7 & is.na(df$race_3)] <- 3

df$race_3[df$TA090924%in%8:9] <- NA 
df$race_3[df$TA090924%in%1:7] <- 3 

table(df$race_3, useNA = "always")
table(df$tas_year_3, useNA = "always")
sum(is.na(df$race_3))-sum(is.na(df$tas_year_3)) 
sum(!is.na(df$tas_year_3))
sum(df$race_3%in%1:2)
# Hence, out of 1554 respondents in TAS third wave, 7 don't have valid race information. 
# In wave 3, there are 1249 non-hispanic Blacks and Whites

# wave 4
df$race_4 <- NA

df$race_4[df$TA111059==1] <- 1
df$race_4[df$TA111059==2] <- 2
df$race_4[df$TA111059%in%3:7] <- 3

df$race_4[df$TA111058==1 & is.na(df$race_4)] <- 1
df$race_4[df$TA111058==2 & is.na(df$race_4)] <- 2
df$race_4[df$TA111058%in%3:7 & is.na(df$race_4)] <- 3

df$race_4[df$TA111057==1 & is.na(df$race_4)] <- 1
df$race_4[df$TA111057==2 & is.na(df$race_4)] <- 2
df$race_4[df$TA111057%in%3:7 & is.na(df$race_4)] <- 3

df$race_4[df$TA111056%in%8:9] <- NA 
df$race_4[df$TA111056%in%1:7] <- 3 

table(df$race_4, useNA = "always")
table(df$tas_year_4, useNA = "always")
sum(is.na(df$race_4))-sum(is.na(df$tas_year_4)) 
sum(!is.na(df$tas_year_4))
sum(df$race_4%in%1:2)
# Hence, out of 1907 respondents in TAS fourth wave, 6 don't have valid race information. 
# In wave 4, there are 1582 non-hispanic Blacks and Whites

# wave 5
df$race_5 <- NA

df$race_5[df$TA131094==1] <- 1
df$race_5[df$TA131094==2] <- 2
df$race_5[df$TA131094%in%3:7] <- 3

df$race_5[df$TA131093==1 & is.na(df$race_5)] <- 1
df$race_5[df$TA131093==2 & is.na(df$race_5)] <- 2
df$race_5[df$TA131093%in%3:7 & is.na(df$race_5)] <- 3

df$race_5[df$TA131092==1 & is.na(df$race_5)] <- 1
df$race_5[df$TA131092==2 & is.na(df$race_5)] <- 2
df$race_5[df$TA131092%in%3:7 & is.na(df$race_5)] <- 3

df$race_5[df$TA131091%in%8:9] <- NA 
df$race_5[df$TA131091%in%1:7] <- 3 

table(df$race_5, useNA = "always")
table(df$tas_year_5, useNA = "always")
sum(is.na(df$race_5))-sum(is.na(df$tas_year_5)) 
sum(!is.na(df$tas_year_5))
sum(df$race_5%in%1:2)
# Hence, out of 1804 respondents in TAS fifth wave, 11 don't have valid race information. 
# In wave 5, there are 1476 non-hispanic Blacks and Whites

# wave 6
df$race_6 <- NA

df$race_6[df$TA151134==1] <- 1
df$race_6[df$TA151134==2] <- 2
df$race_6[df$TA151134%in%3:7] <- 3

df$race_6[df$TA151133==1 & is.na(df$race_6)] <- 1
df$race_6[df$TA151133==2 & is.na(df$race_6)] <- 2
df$race_6[df$TA151133%in%3:7 & is.na(df$race_6)] <- 3

df$race_6[df$TA151132==1 & is.na(df$race_6)] <- 1
df$race_6[df$TA151132==2 & is.na(df$race_6)] <- 2
df$race_6[df$TA151132%in%3:7 & is.na(df$race_6)] <- 3

df$race_6[df$TA151131%in%8:9] <- NA 
df$race_6[df$TA151131%in%1:7] <- 3 

table(df$race_6, useNA = "always")
table(df$tas_year_6, useNA = "always")
sum(is.na(df$race_6))-sum(is.na(df$tas_year_6)) 
sum(!is.na(df$tas_year_6))
sum(df$race_6%in%1:2)
# Hence, out of 1641 respondents in TAS sixth wave, 11 don't have valid race information.
# In wave 6, there are 1321 non-hispanic Blacks and Whites

# wave 7
# note that wave 7 (2017) changes the questionaires 
# and asks the race question for five times and merges hispanicity into the race variable
df$race_7 <- NA

df$race_7[df$TA171959==1] <- 1
df$race_7[df$TA171959==3] <- 2
df$race_7[df$TA171959%in%c(2,4:8)] <- 3

df$race_7[df$TA171958==1 & is.na(df$race_7)] <- 1
df$race_7[df$TA171958==3 & is.na(df$race_7)] <- 2
df$race_7[df$TA171958%in%c(2,4:8) & is.na(df$race_7)] <- 3

df$race_7[df$TA171957==1 & is.na(df$race_7)] <- 1
df$race_7[df$TA171957==3 & is.na(df$race_7)] <- 2
df$race_7[df$TA171957%in%c(2,4:8) & is.na(df$race_7)] <- 3

df$race_7[df$TA171956==1 & is.na(df$race_7)] <- 1
df$race_7[df$TA171956==3 & is.na(df$race_7)] <- 2
df$race_7[df$TA171956%in%c(2,4:8) & is.na(df$race_7)] <- 3

df$race_7[df$TA171955==1 & is.na(df$race_7)] <- 1
df$race_7[df$TA171955==3 & is.na(df$race_7)] <- 2
df$race_7[df$TA171955%in%c(2,4:8) & is.na(df$race_7)] <- 3

table(df$race_7, useNA = "always")
table(df$tas_year_7, useNA = "always")
sum(is.na(df$race_7))-sum(is.na(df$tas_year_7)) 
sum(!is.na(df$tas_year_7))
sum(df$race_7%in%1:2)
# Hence, out of 2526 respondents in TAS seventh wave, 15 don't have valid race information.
# In wave 7, there are 2009 non-hispanic Blacks and Whites

# View(df[,c("pid","race_7","race_6","race_5","race_4","race_3","race_2","race_1")])
# View(df[df$pid==4041,c("pid","TA171955","race_7","race_6","race_5","race_4","race_3","race_2","race_1")])

# haven't checked how many people changed their racial identities

# now, similar to birth year and month, construct a time-constant race variable in a backwards way
df$race <- df$race_7
df$race[is.na(df$race)] <- df$race_6[is.na(df$race)]
df$race[is.na(df$race)] <- df$race_5[is.na(df$race)]
df$race[is.na(df$race)] <- df$race_4[is.na(df$race)]
df$race[is.na(df$race)] <- df$race_3[is.na(df$race)]
df$race[is.na(df$race)] <- df$race_2[is.na(df$race)]
df$race[is.na(df$race)] <- df$race_1[is.na(df$race)]
table(df$race, useNA = "always")  # 3 NAs in the end


### time varying variables ###
# Index note:
# The index n for each variable denotes nth wave. 
# 1: 2005; 2:2007; 3:2009; 4:2011; 5:2013; 6:2015; 7:2017

## interview date for each wave of TAS ##
# note that the variable names for the seventh wave are correct, because TAS changed the coding scheme.
df$tas_year_7 <- df$TA170011
df$tas_year_6 <- df$TA150009
df$tas_year_5 <- df$TA130009
df$tas_year_4 <- df$TA110009
df$tas_year_3 <- df$TA090009
df$tas_year_2 <- df$TA070009
df$tas_year_1 <- df$TA050009

df$tas_month_7 <- df$TA170009
df$tas_month_6 <- df$TA150007
df$tas_month_5 <- df$TA130007
df$tas_month_4 <- df$TA110007
df$tas_month_3 <- df$TA090007
df$tas_month_2 <- df$TA070007
df$tas_month_1 <- df$TA050007

## interview date for each wave of PSID family survery from 2005 to 2017 ##
df$psid_year_7 <- df$ER66014
df$psid_year_6 <- df$ER60014
df$psid_year_5 <- df$ER53014
df$psid_year_4 <- df$ER47314
df$psid_year_3 <- df$ER42014
df$psid_year_2 <- df$ER36014
df$psid_year_1 <- df$ER25014

df$psid_year_n1 <- df$ER21014    # 2003
df$psid_year_n2 <- df$ER17011    # 2001
df$psid_year_n3 <- df$ER13008    # 1999

df$psid_month_7 <- df$ER66012
df$psid_month_6 <- df$ER60012
df$psid_month_5 <- df$ER53012
df$psid_month_4 <- df$ER53012
df$psid_month_3 <- df$ER42012
df$psid_month_2 <- df$ER36012
df$psid_month_1 <- df$ER25012

df$psid_month_n1 <- df$ER21012    # 2003
df$psid_month_n2 <- df$ER17009    # 2001
df$psid_month_n3 <- df$ER13006    # 1999

## the wave at which the respondent made the first independent renting transition
# (I checked. Using "status" to construct retning_wave and owning_wave will produce the same results)
df$renting_wave <- NA
df$renting_wave[(df$inde_renting_17%in%1) & !(df$inde_renting_15%in%1) & !(df$inde_renting_13%in%1) & !(df$inde_renting_11%in%1) & !(df$inde_renting_09%in%1) & !(df$inde_renting_07%in%1) & !(df$inde_renting_05%in%1)] <- 7
df$renting_wave[(df$inde_renting_15%in%1) & !(df$inde_renting_13%in%1) & !(df$inde_renting_11%in%1) & !(df$inde_renting_09%in%1) & !(df$inde_renting_07%in%1) & !(df$inde_renting_05%in%1)] <- 6
df$renting_wave[(df$inde_renting_13%in%1) & !(df$inde_renting_11%in%1) & !(df$inde_renting_09%in%1) & !(df$inde_renting_07%in%1) & !(df$inde_renting_05%in%1)] <- 5
df$renting_wave[(df$inde_renting_11%in%1) & !(df$inde_renting_09%in%1) & !(df$inde_renting_07%in%1) & !(df$inde_renting_05%in%1)] <- 4
df$renting_wave[(df$inde_renting_09%in%1) & !(df$inde_renting_07%in%1) & !(df$inde_renting_05%in%1)] <- 3
df$renting_wave[(df$inde_renting_07%in%1) & !(df$inde_renting_05%in%1)] <- 2
df$renting_wave[(df$inde_renting_05%in%1)] <- 1
table(df$renting_wave)
sum(table(df$renting_wave)) # 1706 made the independent renting transition cumulatively

## the wave at which the respondent made the first home-ownership transition
df$owning_wave <- NA
df$owning_wave[(df$inde_owning_17%in%1) & !(df$inde_owning_15%in%1) & !(df$inde_owning_13%in%1) & !(df$inde_owning_11%in%1) & !(df$inde_owning_09%in%1) & !(df$inde_owning_07%in%1) & !(df$inde_owning_05%in%1)] <- 7
df$owning_wave[(df$inde_owning_15%in%1) & !(df$inde_owning_13%in%1) & !(df$inde_owning_11%in%1) & !(df$inde_owning_09%in%1) & !(df$inde_owning_07%in%1) & !(df$inde_owning_05%in%1)] <- 6
df$owning_wave[(df$inde_owning_13%in%1) & !(df$inde_owning_11%in%1) & !(df$inde_owning_09%in%1) & !(df$inde_owning_07%in%1) & !(df$inde_owning_05%in%1)] <- 5
df$owning_wave[(df$inde_owning_11%in%1) & !(df$inde_owning_09%in%1) & !(df$inde_owning_07%in%1) & !(df$inde_owning_05%in%1)] <- 4
df$owning_wave[(df$inde_owning_09%in%1) & !(df$inde_owning_07%in%1) & !(df$inde_owning_05%in%1)] <- 3
df$owning_wave[(df$inde_owning_07%in%1) & !(df$inde_owning_05%in%1)] <- 2
df$owning_wave[(df$inde_owning_05%in%1)] <- 1
table(df$owning_wave)
sum(table(df$owning_wave)) # 573 made the ownership transition cumulatively

# Below, I'll assess how much the boomerang children and ownership-losing are a problem

## previously has had independent renting
df$prev_inde_renting_07 <- 0
df$prev_inde_renting_07[df$inde_renting_05==1] <- 1
df$prev_inde_renting_09 <- 0
df$prev_inde_renting_09[df$inde_renting_05==1 | df$inde_renting_07==1] <- 1
df$prev_inde_renting_11 <- 0
df$prev_inde_renting_11[df$inde_renting_05==1 | df$inde_renting_07==1 | df$inde_renting_09==1] <- 1
df$prev_inde_renting_13 <- 0
df$prev_inde_renting_13[df$inde_renting_05==1 | df$inde_renting_07==1 | df$inde_renting_09==1 | df$inde_renting_11==1] <- 1
df$prev_inde_renting_15 <- 0
df$prev_inde_renting_15[df$inde_renting_05==1 | df$inde_renting_07==1 | df$inde_renting_09==1 | df$inde_renting_11==1 | df$inde_renting_13==1] <- 1
df$prev_inde_renting_17 <- 0
df$prev_inde_renting_17[df$inde_renting_05==1 | df$inde_renting_07==1 | df$inde_renting_09==1 | df$inde_renting_11==1 | df$inde_renting_13==1 | df$inde_renting_15==1] <- 1

## previously has had independent owning
df$prev_inde_owning_07 <- 0
df$prev_inde_owning_07[df$inde_owning_05==1] <- 1
df$prev_inde_owning_09 <- 0
df$prev_inde_owning_09[df$inde_owning_05==1 | df$inde_owning_07==1] <- 1
df$prev_inde_owning_11 <- 0
df$prev_inde_owning_11[df$inde_owning_05==1 | df$inde_owning_07==1 | df$inde_owning_09==1] <- 1
df$prev_inde_owning_13 <- 0
df$prev_inde_owning_13[df$inde_owning_05==1 | df$inde_owning_07==1 | df$inde_owning_09==1 | df$inde_owning_11==1] <- 1
df$prev_inde_owning_15 <- 0
df$prev_inde_owning_15[df$inde_owning_05==1 | df$inde_owning_07==1 | df$inde_owning_09==1 | df$inde_owning_11==1 | df$inde_owning_13==1] <- 1
df$prev_inde_owning_17 <- 0
df$prev_inde_owning_17[df$inde_owning_05==1 | df$inde_owning_07==1 | df$inde_owning_09==1 | df$inde_owning_11==1 | df$inde_owning_13==1 | df$inde_owning_15==1] <- 1

table(df$status_05, useNA = "always")
table(df$status_07, useNA = "always")
table(df$status_09, useNA = "always")
table(df$status_11, useNA = "always")
table(df$status_13, useNA = "always")
table(df$status_15, useNA = "always")
table(df$status_17, useNA = "always")

# Below I plot the rates of transitons across states
flow_table_function <- function(x, y) {
  
  c(table(df$status_05, df$status_07)[x,y]/sum(table(df$status_05)),
    table(df$status_07, df$status_09)[x,y]/sum(table(df$status_07)),
    table(df$status_09, df$status_11)[x,y]/sum(table(df$status_09)),
    table(df$status_11, df$status_13)[x,y]/sum(table(df$status_13)),
    table(df$status_13, df$status_15)[x,y]/sum(table(df$status_15)),
    table(df$status_15, df$status_17)[x,y]/sum(table(df$status_17)))
  
}

neither_to_renting <- flow_table_function(1,2)
neither_to_owning <- flow_table_function(1,3)
renting_to_neither <- flow_table_function(2,1)
renting_to_owning <- flow_table_function(2,3)
owning_to_renting <- flow_table_function(3,2)
owning_to_neither <- flow_table_function(3,1)

x <- rep(seq(2,7), 6) # wave 2 to wave 7, repeated for 6 times
y <- c(renting_to_owning, neither_to_renting, neither_to_owning, renting_to_neither, owning_to_renting, owning_to_neither)
group <- c(rep(1, 6), rep(2, 6), rep(3, 6), rep(4, 6), rep(5, 6), rep(6, 6))

flow_plot_df <- as.data.frame(cbind(x,y,group))
flow_plot_df$y <- flow_plot_df$y*100 # so that y is the percentage
flow_plot_df$Group <- factor(flow_plot_df$group, 
                                labels=c("renting to owning","neither to renting","neither to owning","renting to neither", 
                                         "owning to renting", "owning to neither"))
# note that the order of the labels needs to be consistent with the order of the values in the y vector

ggplot(flow_plot_df, aes(x=x, y=y, group=Group)) +
  geom_line(aes(linetype=Group, color=Group)) +
  geom_point() +
  xlab("Wave") +
  ylab("Percentage") +
  ggtitle("Figure 1. Rates of Transitions Across States") +
  theme(plot.title = element_text(hjust = 0.5)) +
  labs(caption = "Note: Renting and owning refer to independent renting and owning.\nAnd most people do not change state between two waves.") +
  theme(plot.caption = element_text(hjust = 0)) +
  scale_y_continuous(breaks = c(0, 2.5, 5, 7.5, 10, 12.5))

# df_clean <- df[!is.na(df$status_05) & !is.na(df$status_07) & !is.na(df$status_09) & !is.na(df$status_11) & !is.na(df$status_13) & !is.na(df$status_15) & !is.na(df$status_17), ]
# from 2942 to 2364

### Now I get the covariates

# family homeownership at age 16
table(df$byear)  # 1983 to 1997, which means I need to get family homeownership information from 1999 to 2013
# But the PSID family iterview is also conducted every other year
# So this is what I'm doing:
# 1983/1984 + 16 = 1999/2000 using 1999 data
# 1985/1986 + 16 = 2001/2002 using 2001 data, etc.
# Checkpoint. I should try to use the nearest information (the wave that's collected at a nearest time point to the birthday) for this variable. 
# For this, I need to get even older waves, because the nearest interview date for some people may be before 1999.
# Alternatively, use an average of adolescent years. Consider these issues! (AY 12/16/19)
table(df$own99, useNA = "always")
table(df$own01, useNA = "always")
table(df$own03, useNA = "always")
df$housing_age16 <- NA
df$housing_age16[df$byear==1983 | df$byear==1984] <- df$own99[df$byear==1983 | df$byear==1984]
df$housing_age16[df$byear==1985 | df$byear==1986] <- df$own01[df$byear==1985 | df$byear==1986]
df$housing_age16[df$byear==1987 | df$byear==1988] <- df$own03[df$byear==1987 | df$byear==1988]
df$housing_age16[df$byear==1989 | df$byear==1990] <- df$own05[df$byear==1989 | df$byear==1990]
df$housing_age16[df$byear==1991 | df$byear==1992] <- df$own07[df$byear==1991 | df$byear==1992]
df$housing_age16[df$byear==1993 | df$byear==1994] <- df$own09[df$byear==1993 | df$byear==1994]
df$housing_age16[df$byear==1995 | df$byear==1996] <- df$own11[df$byear==1995 | df$byear==1996]
df$housing_age16[df$byear==1997] <- df$own13[df$byear==1997]
table(df$housing_age16, useNA = "always")
df$housing_age16[is.na(df$housing_age16)] <- 2
# 0: renting; 1: owning; 2: neither or NA

# rename the state variables
df$fam_state99 <- df$ER13005
df$fam_state01 <- df$ER17005
df$fam_state03 <- df$ER21004
df$fam_state05 <- df$ER25004
df$fam_state07 <- df$ER36004
df$fam_state09 <- df$ER42004
df$fam_state11 <- df$ER47304
df$fam_state13 <- df$ER53004
df$fam_state15 <- df$ER60004
df$fam_state17 <- df$ER66004

df$tas_state05 <- df$TA050005 
df$tas_state07 <- df$TA070005
df$tas_state09 <- df$TA090005
df$tas_state11 <- df$TA110005
df$tas_state13 <- df$TA130005
df$tas_state15 <- df$TA150005
df$tas_state17 <- df$TA170005

# state at age 16
# The NAs in each fam_state variable comes from the absence of the PSID family interview in that year.
df$state_age16 <- NA
df$state_age16[df$byear==1983 | df$byear==1984] <- df$fam_state99[df$byear==1983 | df$byear==1984]
df$state_age16[df$byear==1985 | df$byear==1986] <- df$fam_state01[df$byear==1985 | df$byear==1986]
df$state_age16[df$byear==1987 | df$byear==1988] <- df$fam_state03[df$byear==1987 | df$byear==1988]
df$state_age16[df$byear==1989 | df$byear==1990] <- df$fam_state05[df$byear==1989 | df$byear==1990]
df$state_age16[df$byear==1991 | df$byear==1992] <- df$fam_state07[df$byear==1991 | df$byear==1992]
df$state_age16[df$byear==1993 | df$byear==1994] <- df$fam_state09[df$byear==1993 | df$byear==1994]
df$state_age16[df$byear==1995 | df$byear==1996] <- df$fam_state11[df$byear==1995 | df$byear==1996]
df$state_age16[df$byear==1997] <- df$fam_state13[df$byear==1997]
table(df$state_age16, useNA = "always")  # 0 is U.S. territory or foreign country


### set up the long data form

# first only keep the variables in use
df_inuse <- df[,c("pid","male","byear","bmonth","race","owning_wave","renting_wave",
              "ref05","ref07","ref09","ref11","ref13","ref15","ref17",
              "own05","own07","own09","own11","own13","own15","own17",
              "inde_renting_05","inde_renting_07","inde_renting_09","inde_renting_11","inde_renting_13","inde_renting_15","inde_renting_17",
              "inde_owning_05","inde_owning_07","inde_owning_09","inde_owning_11","inde_owning_13","inde_owning_15","inde_owning_17",
              "status_05","status_07","status_09","status_11","status_13","status_15","status_17",
              "psid_year_1","psid_year_2","psid_year_3","psid_year_4","psid_year_5","psid_year_6","psid_year_7", 
              "psid_month_1","psid_month_2","psid_month_3","psid_month_4","psid_month_5","psid_month_6","psid_month_7",
              "tas_year_1","tas_year_2","tas_year_3","tas_year_4","tas_year_5","tas_year_6","tas_year_7", 
              "tas_month_1","tas_month_2","tas_month_3","tas_month_4","tas_month_5","tas_month_6","tas_month_7",
              "housing_age16","state_age16",
              "fam_state05","fam_state07","fam_state09","fam_state11","fam_state13","fam_state15","fam_state17",
              "tas_state05","tas_state07","tas_state09","tas_state11","tas_state13","tas_state15","tas_state17"
              )]
# Note that the order of the time-varying variables in the selection step above matters!!!
# Geez, what a tricky trap! If the order of each variable is not consistent, the reshape command will fuck up!

# then generate the time-varying variable names in long form
time_varying_long <- c("ref", "psid_year", "psid_month", "tas_year", "tas_month","inde_renting","inde_owning","status","fam_state","tas_state")

# get the corresponding variable names in wide form
time_varying_wide <- lapply(time_varying_long, function(x) grep(x, colnames(df_inuse), value=T))

# use the reshape command the get the long-form data  
df_long <- reshape(df_inuse, 
                   varying=time_varying_wide, 
                   v.names=time_varying_long,
                   idvar="pid",
                   timevar="wave",
                   direction="long")

df_long <- df_long[order(df_long$pid),]

## age at TAS interview ##
# first recode the interview month and birth month to decimalism
df_long$bmonth_r <- df_long$bmonth/12
df_long$psid_month_r <- df_long$psid_month/12  # note that PSID month and year are from PSID family survey

sum(is.na(df_long$psid_month_r)&!is.na(df_long$psid_year))  # 106 missing month but not year
table(is.na(df_long$psid_month_r)&!is.na(df_long$psid_year), df_long$wave) # all 106 are in wave 4
sum(!is.na(df_long$psid_month_r)&is.na(df_long$psid_year))  # 63 missing year but not month
table(!is.na(df_long$psid_month_r)&is.na(df_long$psid_year), df_long$wave) # all 63 are also in wave 4

# I decide to use the mean to replace the missing values in wave 4, because otherwise I'll have to get rid of valid records of outcome status, which feels unnecessary.
# Also, if I don't replace the missing values, there will be dozens of cases in wave 6 where the gap value looks quite high. This was what motivated me to check and do the mean-replacement. (AY 12/08/19) 
table(df_long$psid_year[df_long$wave==4], useNA = "always")
df_long$psid_year[df_long$wave==4] <- 2011

table(df_long$psid_month[df_long$wave==4], useNA = "always")
mean(df_long$psid_month_r[df_long$wave==4], na.rm = T)
df_long$psid_month_r[df_long$wave==4 & is.na(df_long$psid_month_r)] <- mean(df_long$psid_month_r[df_long$wave==4], na.rm = T)

# then generate composite times for interview and birth
df_long$birth_time <- df_long$byear + df_long$bmonth_r 
df_long$int_time <- df_long$psid_year + df_long$psid_month_r

# take the difference (what's age at the interview of PSID family survery in terms of month?) 
# note that I use the PSID family survery time because the independence and housing status variables are drawn from PSID family. 
df_long$age <- df_long$int_time - df_long$birth_time  # age is the precise age variable
df_long$age_int <- as.integer(df_long$age) # age_int is the smaller integer (for example, as.integer(6.6)=6)
df_long$age_rnd <- round(df_long$age) # round(6.6)=7
summary(df_long$age)
table(df_long$age_int, useNA = "always")
table(df_long$age_rnd, useNA = "always")

# View(df_long[,c("pid","age","psid_year","tas_year")])
sum(is.na(df_long$age))/nrow(df_long) # 4.2% missing age at interview. These are just families that miss the family interview in certain years.


# generate a variable for the age at which the respondent made the renting transition
table(df_long$renting_wave, useNA = "always")

sum(df_long$renting_wave>df_long$owning_wave, na.rm = T)  # 441. Some people made the owning transition before they also made the renting transition
sum(df_long$renting_wave<df_long$owning_wave, na.rm = T)  # 2415
table(df_long$renting_wave, df_long$owning_wave) # reassuringly, nobody made the two transitions at the same time

df_long$age_rent <- NA

for (i in 1:length(unique(df_long$pid))) {
  
  renting_wave <- df_long$renting_wave[df_long$pid==unique(df_long$pid)[i]][1]  # the renting wave for person i. It's a time-constant variale, so I just take the first of it.
  owning_wave <- df_long$owning_wave[df_long$pid==unique(df_long$pid)[i]][1]
  
  if (!is.na(renting_wave) & !is.na(owning_wave) & renting_wave<owning_wave) {   
    # if the person has made both transitions and renting happened before the owning, use the age at renting 
    df_long$age_rent[df_long$pid==unique(df_long$pid)[i]] <- 
      df_long$age[df_long$pid==unique(df_long$pid)[i] & 
                    df_long$wave==df_long$renting_wave[df_long$pid==unique(df_long$pid)[i]]]       # Note that I'm using the precise age
  }
  else if (!is.na(renting_wave) & is.na(owning_wave)) {  
    # if having made the renting transition but not the owning transition, also use the age at renting
    df_long$age_rent[df_long$pid==unique(df_long$pid)[i]] <- 
      df_long$age[df_long$pid==unique(df_long$pid)[i] & 
                    df_long$wave==df_long$renting_wave[df_long$pid==unique(df_long$pid)[i]]]
  }
  # all the other scenarios, age at renting is NA
  else {df_long$age_rent[df_long$pid==unique(df_long$pid)[i]] <- NA}
}

summary(df_long$age_rent) # The number of NAs is the sum of NAs in renting and the number of person-waves of people who owned before rented (8652+441)
sum(df_long$age_rent<18, na.rm = T) # 21 person-years
table(df_long$status, df_long$age_int) # Correspondingly, 3 people made the renting transition at integer age 17. 
# In order to make my life easier in later steps (otherwise it's very tricky), I'll just drop these 3 people.
df_long <- df_long[df_long$age_rent>=18 | is.na(df_long$age_rent),]  # from 20594 to 20573

# Similarly, generate a variable for the age at which the respondent made the owning transition
# It's much easier because I no longer need to worry about reversed order of renting and owning
table(df_long$owning_wave, useNA = "always")
df_long$age_own <- NA
for (i in 1:length(unique(df_long$pid))) {
  
  owning_wave <- df_long$owning_wave[df_long$pid==unique(df_long$pid)[i]][1]
  
  df_long$age_own[df_long$pid==unique(df_long$pid)[i]] <- 
    df_long$age[df_long$pid==unique(df_long$pid)[i] & 
                  df_long$wave==df_long$owning_wave[df_long$pid==unique(df_long$pid)[i]]] 
}
summary(df_long$age_own) # The NAs are just the NAs in owning_wave
sum(df_long$age_own<18, na.rm = T) # nobody


# only keep person-waves when the repsondent is older than 18 
df_long <- df_long[df_long$age>=18,]  # from 20573 to 14527
df_long <- df_long[!is.na(df_long$age),] # from 14527 to 13665 ||| (14527-13665)/14527=0.05933778
# This step drops all person-waves that are not captured by family interview because any person-wave missing age is equivalent to missing the whole interview.
sum(is.na(df_long$age))

# View(df_long[,c("pid","age","status")])

## gap in status record
# for the sake of control for interview spacing in the discrete-time EHA, I need to construct a variable indicating whether there has been a gap in record and how long the gap is. 
table(df_long$status, useNA = "always")
# First, there is nobody who has NAs in any year
# the spacing value for the first interview is the gap between age 18 and age at first interview
# for later interviews (given the respondent is observed for more than once), the spacing value is the gap between this interview and the last interview
# note that in the loop I used the age variable which is the precise age, not the integer version
df_long$gap <- NA
for (i in 1:length(unique(df_long$pid))) {
  
  status_vector <- df_long$status[df_long$pid==unique(df_long$pid)[i]] # the vector of status in each available wave for person i
  gap_vector <- rep(NA, length(status_vector)) # the corresponding empty vector for gap length between each wave
  gap_vector[1] <- df_long$age[df_long$pid==unique(df_long$pid)[i]][1]-18  # the first gap is the gap between age 18 and the first interview
  
  if (length(status_vector)>1) {    # because some people may only have one wave of record
    
    for (j in 2:length(status_vector)) {
      gap_vector[j] <- df_long$age[df_long$pid==unique(df_long$pid)[i]][j]-df_long$age[df_long$pid==unique(df_long$pid)[i]][j-1]  # the age difference between two waves
    }
  }
  df_long$gap[df_long$pid==unique(df_long$pid)[i]] <- gap_vector
}
summary(df_long$gap)
hist(df_long$gap)

# View(df_long[df_long$gap>=5, c("pid","byear","age","psid_year","wave","status","gap")])
# View(df_long[df_long$pid==1066032, c("pid","byear","psid_year","wave","gap")])  An example
nrow(df_long[df_long$gap>=4,c("pid","byear","age","psid_year","wave","status","gap")])  # 127 person-waves have more than 4 years elapsed
nrow(df_long[df_long$gap>=5,c("pid","byear","age","psid_year","wave","status","gap")])  # 12 person-waves have more than 5 years elapsed
# pid_long_gap <- df_long$pid[df_long$gap>=4]
# View(df_long[df_long$pid %in% pid_long_gap, c("pid","byear","age","psid_year","wave","status","gap")])

# generate a variable indicating the gap before the renting wave. 
df_long$renting_gap <- NA
for (i in 1:length(unique(df_long$pid))) {
  
  renting_wave <- df_long$renting_wave[df_long$pid==unique(df_long$pid)[i]][1]  # the renting wave for person i. It's a time-constant variale, so I just take the first of it.
  renting_gap <- df_long$gap[df_long$pid==unique(df_long$pid)[i] & df_long$wave==renting_wave]  # the gap at the wave when the respondent made the renting transition. Never-renters just get NA.
  df_long$renting_gap[df_long$pid==unique(df_long$pid)[i]] <- renting_gap
  
}
summary(df_long$renting_gap)
summary(df_long$renting_wave)
summary(df_long$gap)
table(is.na(df_long_own$renting_gap), is.na(df_long_own$age_rent))  # control for renting_gap will not lead to loss of sample on the top of the use of age_rent

# Similarly, generate a variable indicating the gap before the owning wave. 
df_long$owning_gap <- NA
for (i in 1:length(unique(df_long$pid))) {
  
  owning_wave <- df_long$owning_wave[df_long$pid==unique(df_long$pid)[i]][1]  # the owning wave for person i. It's a time-constant variale, so I just take the first of it.
  owning_gap <- df_long$gap[df_long$pid==unique(df_long$pid)[i] & df_long$wave==owning_wave]  # the gap at the wave when the respondent made the owning transition. Never-owners just get NA.
  df_long$owning_gap[df_long$pid==unique(df_long$pid)[i]] <- owning_gap
  
}
summary(df_long$owning_gap)
summary(df_long$owning_wave)
summary(df_long$gap)

# generate a time-varying variable for current state
table(df_long$fam_state, useNA = "always")
table(df_long$tas_state, useNA = "always")

df_long$tas_state[df_long$tas_state==99] <- NA # only one person-wave has 99 (NA) in tas_state

table(df_long$ref, useNA = "always")
df_long$own_state <- NA
df_long$own_state[df_long$ref==1 & !is.na(df_long$ref)] <- df_long$fam_state[df_long$ref==1 & !is.na(df_long$ref)]  # if already ref person, use family state as personal state
df_long$own_state[df_long$ref==0 & !is.na(df_long$ref)] <- df_long$tas_state[df_long$ref==0 & !is.na(df_long$ref)]  # otherwise, use TAS state as personal state
table(df_long$own_state, useNA = "always")
# generate an indicator for whether still live in the same state as age 16
table(df_long$state_age16, useNA = "always")
table(df_long$state_age16==df_long$own_state, useNA = "always")
df_long$diff_state[df_long$state_age16==df_long$own_state & !is.na(df_long$state_age16) & !is.na(df_long$own_state)] <- 0  # same state as age 16
df_long$diff_state[df_long$state_age16!=df_long$own_state & !is.na(df_long$state_age16) & !is.na(df_long$own_state)] <- 1  # different state
df_long$diff_state[is.na(df_long$state_age16) | is.na(df_long$own_state)] <- 2  # NA
table(df_long$diff_state)

# note that I can't use TAS housing record to complement the status records in PSID Family, because TAS does not tell me whether the person is independent.
# only keep person-waves with valid outcome status
sum(is.na(df_long$status))  # 90 person-waves missing status
table(is.na(df_long$status), df_long$wave) # again, all missing values are in wave 4. I've thought about this, nothing I can do. (AY 12/08/19)
df_long <- df_long[!is.na(df_long$status),]  # from 13665 to 13575

# only keep Blacks and Whites
table(df_long$race, useNA = "always")  
table(df_long$pid[is.na(df_long$race)]) # there are only 10 person-waves and 3 people missing race. 
# The race variable here is constructed from TAS, it's probably possible to find race information for these people from another dataset, but I think it's not worth it.
df_long <- df_long[df_long$race%in%c(1,2),] # from 13575 to 11270
# then generate a black vs white dummy
df_long$black <- df_long$race-1

# View(df_long[,c("pid","wave","owning_wave","housing")])

# Now I generate two seperate datasets for ownership transition and renting transition
df_long_own <- df_long
df_long_rent <- df_long

# First, the owning dataset
sum(table(df_long_own$owning_wave)) # 2913 person-waves where the persons have made the ownership transition
# only keep wave that is or before the wave the respondent made the first-time homeownership transition and person-waves for people who have never made the transition
# if df_long_own$wave=NA, the person has never made the transition
df_long_own <- df_long_own[df_long_own$wave<=df_long_own$owning_wave | is.na(df_long_own$owning_wave),] # from 11281 to 10508
sum(table(df_long_own$owning_wave)) # 2140

# indicator for homeownership as in the discrete-time EHA setting
df_long_own$ownership <- NA
df_long_own$ownership[is.na(df_long_own$owning_wave)] <- 0 # people who've never made the transition to homeownership
df_long_own$ownership[df_long_own$wave==df_long_own$owning_wave & !is.na(df_long_own$owning_wave)] <- 1  # wave of the transition
df_long_own$ownership[df_long_own$wave<df_long_own$owning_wave & !is.na(df_long_own$owning_wave)] <- 0 # waves before the transition
table(df_long_own$ownership, useNA = "always")
# 0: 9997; 1:500
table(df_long_own$ownership)[2]/nrow(df_long_own)  # fraction of ownership person-waves: 0.04763266 
table(df_long_own$ownership, df_long_own$black)


# Second, the renting dataset
sum(table(df_long_rent$renting_wave)) # 7294 person-waves where where the persons have made the renting transition
# only keep wave that are or before the wave the respondent made the first-time renting transition and person-waves for people who have never made the transition
# if df_long_rent$wave=NA, the person has never made the transition
df_long_rent <- df_long_rent[df_long_rent$wave<=df_long_rent$renting_wave | is.na(df_long_rent$renting_wave),] # from 11270 to 8086
# Although there are more people making the renting transition, there are also more person-waves spent after the transition. 
# So, after dropping, there are less person-waves in the renting data than the owning data. 
sum(table(df_long_rent$renting_wave)) # 4110

## indicator for renting as in the discrete-time EHA setting
df_long_rent$renting <- NA
df_long_rent$renting[is.na(df_long_rent$renting_wave)] <- 0 # people who've never made the transition to homeownership
df_long_rent$renting[df_long_rent$wave==df_long_rent$renting_wave & !is.na(df_long_rent$renting_wave)] <- 1  # wave of the transition
df_long_rent$renting[df_long_rent$wave<df_long_rent$renting_wave & !is.na(df_long_rent$renting_wave)] <- 0 # waves before the transition
table(df_long_rent$renting, useNA = "always")
# 0: 6692; 1:1394
table(df_long_rent$renting)[2]/nrow(df_long_rent)  # fraction of renting person-waves: 0.1723967 
table(df_long_rent$renting, df_long_rent$black)

# Note: quoting the TAS user guide:
# CDS youth will participate in TAS data collection until they reach age 28, regardless of whether they have become members of Core PSID.

### generate a wide-form data again for various usage
# generate variables for age at last interview
table(df_long$wave, useNA = "always")
df_long$age_last <- NA
for (i in 1:length(unique(df_long$pid))) {
  
  last_wave <- tail(df_long$wave[df_long$pid==unique(df_long$pid)[i]], 1)  # the last wave 
  
  df_long$age_last[df_long$pid==unique(df_long$pid)[i]] <- 
    df_long$age[df_long$pid==unique(df_long$pid)[i] & 
                  df_long$wave==last_wave] 
}
summary(df_long$age_last) 

# generate integer version of timing variables
df_long$age_rent_int <- as.integer(df_long$age_rent)
df_long$age_own_int <- as.integer(df_long$age_own)
df_long$age_last_int <- as.integer(df_long$age_last)

table(df_long$age_rent_int, useNA = "always")
table(df_long$age_own_int, useNA = "always")
table(df_long$age_last_int, useNA = "always")

df_wide <- df_long[,c("pid","black","age_rent_int","age_own_int","age_last_int")]
length(unique(df_wide$pid))  # 2417
df_wide <- df_wide[!duplicated(df_wide),]
nrow(df_wide)  # verified
# View(df_wide)
sum(df_wide$age_rent_int>df_wide$age_last_int, na.rm = T)
sum(df_wide$age_own_int>df_wide$age_last_int, na.rm = T)
sum(df_wide$age_rent_int>df_wide$age_own_int, na.rm = T) # verified. no bad behavior. 

## now, plot hazard rates
# note that the way the hazard rate is calculated here assumes something:
# for example, if one is not owner at 23, and is owner at 26 (and there is no record in between), then I assume this person becomes owner at exactly 26 (instead of 24 or 25).
max(df_wide$age_last_int)
table(df_wide$age_last_int)

intervals <- length(18:max(df_wide$age_last_int))  # number of age intervals in the data

hazard_renting <- rep(NA, intervals)
at_risk_renting <- rep(NA, intervals)
cumulative_death_lost <- 0
for (i in 1:intervals) {
  
  death <- sum(df_wide$age_rent_int==i+intervals, na.rm = T)   # number of "death". Using the survivial analysis terminology
  lost <- sum(df_wide$age_last_int[is.na(df_wide$age_rent_int)]==i+intervals)  # number of lost to censoring. (the age at last interview for those who never made the transition)
  hazard_renting[i] <- death/(nrow(df_wide)-cumulative_death_lost)
  at_risk_renting[i] <- nrow(df_wide)-cumulative_death_lost  # get a record of number of people at risk at each age
  cumulative_death_lost <- cumulative_death_lost + death + lost  # additive deaths + lost in this round
  
} 
plot(hazard_renting)

hazard_owning <- rep(NA, intervals)
at_risk_owning <- rep(NA, intervals)
cumulative_death_lost <- 0
for (i in 1:intervals) {
  
  death <- sum(df_wide$age_own_int==i+intervals, na.rm = T)   # number of "death". Using the survivial analysis terminology
  lost <- sum(df_wide$age_last_int[is.na(df_wide$age_own_int)]==i+intervals)  # number of lost to censoring. (the age at last interview for those who never made the transition)
  hazard_owning[i] <- death/(nrow(df_wide)-cumulative_death_lost)
  at_risk_owning[i] <- nrow(df_wide)-cumulative_death_lost
  cumulative_death_lost <- cumulative_death_lost + death + lost  # additive deaths + lost in this round
  
} 
plot(hazard_owning)

# by race
hazard_renting_black <- rep(NA, intervals)
at_risk_renting_black <- rep(NA, intervals)
cumulative_death_lost <- 0
for (i in 1:intervals) {
  
  death <- sum(df_wide$age_rent_int[df_wide$black==1]==i+intervals, na.rm = T)   # number of "death". Using the survivial analysis terminology
  lost <- sum(df_wide$age_last_int[is.na(df_wide$age_rent_int & df_wide$black==1)]==i+intervals)  # number of lost to censoring. (the age at last interview for those who never made the transition)
  hazard_renting_black[i] <- death/(nrow(df_wide[df_wide$black==1,])-cumulative_death_lost)
  at_risk_renting_black[i] <- nrow(df_wide[df_wide$black==1,])-cumulative_death_lost
  cumulative_death_lost <- cumulative_death_lost + death + lost  # additive deaths + lost in this round
  
} 
plot(hazard_renting_black)

hazard_owning_black <- rep(NA, intervals)
at_risk_owning_black <- rep(NA, intervals)
cumulative_death_lost <- 0
for (i in 1:intervals) {
  
  death <- sum(df_wide$age_own_int[df_wide$black==1]==i+intervals, na.rm = T)   # number of "death". Using the survivial analysis terminology
  lost <- sum(df_wide$age_last_int[is.na(df_wide$age_own_int & df_wide$black==1)]==i+intervals)  # number of lost to censoring. (the age at last interview for those who never made the transition)
  hazard_owning_black[i] <- death/(nrow(df_wide[df_wide$black==1,])-cumulative_death_lost)
  at_risk_owning_black[i] <- nrow(df_wide[df_wide$black==1,])-cumulative_death_lost
  cumulative_death_lost <- cumulative_death_lost + death + lost  # additive deaths + lost in this round
  
} 
plot(hazard_owning_black)

hazard_renting_white <- rep(NA, intervals)
at_risk_renting_white <- rep(NA, intervals)
cumulative_death_lost <- 0
for (i in 1:intervals) { 
  
  death <- sum(df_wide$age_rent_int[df_wide$black==0]==i+intervals, na.rm = T)   # number of "death". Using the survivial analysis terminology
  lost <- sum(df_wide$age_last_int[is.na(df_wide$age_rent_int & df_wide$black==0)]==i+intervals)  # number of lost to censoring. (the age at last interview for those who never made the transition)
  hazard_renting_white[i] <- death/(nrow(df_wide[df_wide$black==0,])-cumulative_death_lost)
  at_risk_renting_white[i] <- nrow(df_wide[df_wide$black==0,])-cumulative_death_lost 
  cumulative_death_lost <- cumulative_death_lost + death + lost  # additive deaths + lost in this round
  
}  
plot(hazard_renting_white)

hazard_owning_white <- rep(NA, intervals)
at_risk_owning_white <- rep(NA, intervals)
cumulative_death_lost <- 0
for (i in 1:intervals) {
  
  death <- sum(df_wide$age_own_int[df_wide$black==0]==i+intervals, na.rm = T)   # number of "death". Using the survivial analysis terminology
  lost <- sum(df_wide$age_last_int[is.na(df_wide$age_own_int & df_wide$black==0)]==i+intervals)  # number of lost to censoring. (the age at last interview for those who never made the transition)
  hazard_owning_white[i] <- death/(nrow(df_wide[df_wide$black==0,])-cumulative_death_lost)
  at_risk_owning_white[i] <- nrow(df_wide[df_wide$black==0,])-cumulative_death_lost
  cumulative_death_lost <- cumulative_death_lost + death + lost  # additive deaths + lost in this round
  
} 
plot(hazard_owning_white)

x <- rep(seq(18,(17+intervals)), 2)
y <- c(hazard_renting_black, hazard_renting_white) 
Group <- c(rep("Black", intervals), rep("White", intervals))
at_risk <- c(at_risk_renting_black, at_risk_renting_white)
hazard_plot_df_renting <- as.data.frame(cbind(x, y, Group, at_risk), stringsAsFactors = F)
hazard_plot_df_renting$y <- as.numeric(hazard_plot_df_renting$y)
hazard_plot_df_renting$x <- as.numeric(hazard_plot_df_renting$x)
# View(hazard_plot_df_renting)
# nobody at risk at age 34 for both Whites and Blacks, so I drop the two rows where nobody is at risk.
hazard_plot_df_renting <- hazard_plot_df_renting[hazard_plot_df_renting$at_risk!=0,]

ggplot(hazard_plot_df_renting, aes(x=x, y=y, group=Group)) +
  geom_point(aes(shape=Group)) + 
  geom_smooth(aes(linetype=Group, color=Group), method = "loess") +  
  xlab("Age") +
  ylab("Hazard Rate") +
  ggtitle("Figure 2. Smoothed Hazard Estimates for Renting") +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_y_continuous(limits = c(-0.01, 0.21)) + 
  scale_x_continuous(breaks = seq(18, 33, 3))


x <- rep(seq(18,(17+intervals)), 2)
y <- c(hazard_owning_black, hazard_owning_white) 
Group <- c(rep("Black", intervals), rep("White", intervals))
at_risk <- c(at_risk_owning_black, at_risk_owning_white)
hazard_plot_df_owning <- as.data.frame(cbind(x, y, Group, at_risk), stringsAsFactors = F)
hazard_plot_df_owning$y <- as.numeric(hazard_plot_df_owning$y)
hazard_plot_df_owning$x <- as.numeric(hazard_plot_df_owning$x)
# View(hazard_plot_df_owning)
# nobody at risk at age 34 Whites, only one Black person at risk at 34. I again drop these two rows.
hazard_plot_df_owning <- hazard_plot_df_owning[hazard_plot_df_owning$at_risk>1,]

ggplot(hazard_plot_df_owning, aes(x=x, y=y, group=Group)) +
  geom_point(aes(shape=Group)) + 
  geom_smooth(aes(linetype=Group, color=Group), method = "loess") +  
  xlab("Age") +
  ylab("Hazard Rate") +
  ggtitle("Figure 3. Smoothed Hazard Estimates for Owning") +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_y_continuous(limits = c(-0.02, 0.22), breaks = seq(0.00, 0.20, 0.05)) + 
  scale_x_continuous(breaks = seq(18, 33, 3))


table(df_long_rent$age_int)
# I've thought about the relationship between the age distribution in the long form data and the hazard in the wide form
# The wide-form data is like an expanded version of the long-form. In the long-form, the age spacing between every two record is not 1.

##### models

colnames(df_long_own)
colnames(df_long_rent)

# format factor variables
factor_var <- c("black","male","wave","age_int","age_rnd","diff_state","state_age16","housing_age16")

for (i in 1:length(factor_var)) {
  df_long_own[,colnames(df_long_own)%in%factor_var[i]] <- as.factor(df_long_own[,colnames(df_long_own)%in%factor_var[i]])
}

for (i in 1:length(factor_var)) {
  df_long_rent[,colnames(df_long_rent)%in%factor_var[i]] <- as.factor(df_long_rent[,colnames(df_long_rent)%in%factor_var[i]])
}

### Actual models

model1 <- glm(renting ~ black + housing_age16 + diff_state + gap + wave + age_int + state_age16, data = df_long_rent, family = binomial(link = "logit"))
summary(model1)
nrow(df_long_rent)-120

model2 <- glm(renting ~ black + housing_age16 + diff_state + gap + wave + age_int + state_age16, data = df_long_rent, family = binomial(link = "cloglog"))
summary(model2)

model3 <- glm(ownership ~ black + housing_age16 + diff_state + gap + wave + age_int + state_age16, data = df_long_own, family = binomial(link = "logit"))
summary(model3)
exp(coef(model3))   # black: 0.3305  The odds for african americans is one third of the odds for whites
nrow(df_long_own)-192
# Checkpoint. Think about the extremely high correlation between diff_state==2 and the outcomes.
# Should be because of the way they are constructed. (state is NA -> outcome=0)
# Or perhaps because it's correlation with the NA category in housing_age16?

model4 <- glm(ownership ~ black + housing_age16 + diff_state + gap + wave + age_int + state_age16, data = df_long_own, family = binomial(link = "cloglog"))
summary(model4)

model5 <- glm(ownership ~ black + housing_age16 + black*housing_age16 + diff_state + gap + wave + age_int + state_age16, data = df_long_own, family = binomial(link = "logit"))
summary(model5)
nrow(df_long_own)-192

model6 <- glm(ownership ~ black + housing_age16 + black*housing_age16 + diff_state + gap + wave + age_int + state_age16, data = df_long_own, family = binomial(link = "cloglog"))
summary(model6)

#
df_long_own_post_renting <- df_long_own[as.numeric(df_long_own$wave)>df_long_own$renting_wave & !is.na(df_long_own$age_rent),]
nrow(df_long_own_post_renting)
# This sample is constructed based on three conditions:
# The person must have experienced renting
# The person must not experience owning before renting
# The person-wave is strictly after renting transition

model7 <- glm(ownership ~ black + age_rent + housing_age16 + diff_state + gap + wave + age_int + state_age16, data = df_long_own_post_renting, family = binomial(link = "logit"))
summary(model7)  
# This model is only for those who have made the renting transition and whose ownership transition, if has happened, is not before the renting transition
# Also, for this model, I only use person-waves that have already made the renting transition
exp(coef(model7))   # black: 0.3669  The odds for african americans is one third of the odds for whites
nrow(df_long_own_post_renting)-78   # 2774

model8 <- glm(ownership ~ black + age_rent + housing_age16 + diff_state + gap + wave + age_int + state_age16, data = df_long_own_post_renting, family = binomial(link = "cloglog"))
summary(model8)






### section to revisit
table(df_long$age)
df_long$age_group <- NA
3 + 800 + 1118 
df_long$age_group[df_long$age_tas_int%in%c(18,19,20)] <- 1
1128 + 971
df_long$age_group[df_long$age_tas_int%in%c(21,22)] <- 2
df_long$age_group[df_long$age_tas_int%in%c(23,24)] <- 3
df_long$age_group[df_long$age_tas_int%in%c(25,26)] <- 4
566 + 503 + 169 +  4 
df_long$age_group[df_long$age_tas_int%in%c(27,28,29,30)] <- 5
df_long$age_group <- as.factor(df_long$age_group)
table(df_long$age_group, useNA = "always")
###
